openapi: 3.0.3
info:
  title: Flunq.io Workflow API
  description: |
    REST API for the Flunq.io serverless workflow engine.

    This API provides endpoints for managing workflows, executions, and monitoring workflow state.
    All workflows follow the Serverless Workflow Definition Language specification.

    ## Multi-Tenant Architecture

    The API supports multi-tenant operations where all resources are scoped to a specific tenant.
    All endpoints require a `tenantId` path parameter to identify the tenant context.

    ## Event-Driven Architecture

    The system uses an event-driven architecture with Redis Streams for real-time event processing.
    All workflow state changes are captured as events and can be retrieved through the events API.

    ## Execution Model

    Workflows are executed asynchronously. When you start a workflow execution, you receive an
    execution ID that can be used to track progress and retrieve results.
  version: 1.0.0
  contact:
    name: Flunq.io API Support
    url: https://github.com/flunq-io/flunq.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.flunq.io/v1
    description: Production server

paths:
  /{tenantId}/workflows:
    post:
      summary: Create a new workflow
      description: Creates a new workflow from a Serverless Workflow Definition Language specification for the specified tenant
      operationId: createWorkflow
      tags:
        - Workflows
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
            examples:
              simple-test-workflow:
                summary: Simple test workflow
                value:
                  name: "Simple Test Workflow"
                  description: "A simple workflow for testing multi-tenant functionality"
                  definition:
                    id: "simple-test"
                    version: "0.8"
                    specVersion: "0.8"
                    name: "Simple Test Workflow"
                    start: "initialize"
                    states:
                      - name: "initialize"
                        type: "operation"
                        actions:
                          - name: "init-action"
                            functionRef:
                              refName: "initialize"
                        transition: "processData"
                      - name: "processData"
                        type: "operation"
                        actions:
                          - name: "process-action"
                            functionRef:
                              refName: "processData"
                        transition: "waitStep"
                      - name: "waitStep"
                        type: "operation"
                        actions:
                          - name: "wait-action"
                            functionRef:
                              refName: "waitStep"
                        transition: "finalize"
                      - name: "finalize"
                        type: "operation"
                        actions:
                          - name: "final-action"
                            functionRef:
                              refName: "finalize"
                        end: true
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
              examples:
                created:
                  value:
                    id: "wf_72df93aa-4ca7-46"
                    name: "Simple Test Workflow"
                    status: "created"
                    tenant_id: "acme-inc"
                    created_at: "2025-08-08T11:00:00Z"
                    updated_at: "2025-08-08T11:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List workflows for tenant
      description: Retrieve a list of workflows for the specified tenant with optional filtering
      operationId: listWorkflows
      tags:
        - Workflows
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: status
          in: query
          description: Filter workflows by status
          schema:
            type: string
            enum: [created, active, inactive]
        - name: limit
          in: query
          description: Maximum number of workflows to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of workflows to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of workflows for the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/workflows/{workflowId}:
    get:
      summary: Get workflow details
      description: Retrieve detailed information about a specific workflow for the specified tenant
      operationId: getWorkflow
      tags:
        - Workflows
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDetailResponse'
              examples:
                workflow_detail:
                  value:
                    id: "wf_72df93aa-4ca7-46"
                    name: "Simple Test Workflow"
                    description: "A simple workflow for testing multi-tenant functionality"
                    status: "active"
                    tenant_id: "acme-inc"
                    created_at: "2025-08-08T11:00:00Z"
                    updated_at: "2025-08-08T11:00:00Z"
                    definition:
                      id: "simple-test"
                      version: "0.8"
                      specVersion: "0.8"
                      name: "Simple Test Workflow"
                      start: "initialize"
                      states:
                        - name: "initialize"
                          type: "operation"
                        - name: "processData"
                          type: "operation"
                        - name: "waitStep"
                          type: "operation"
                        - name: "finalize"
                          type: "operation"
                    execution_count: 3
                    last_execution: "2025-08-08T11:21:49Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update workflow
      description: Update an existing workflow definition for the specified tenant
      operationId: updateWorkflow
      tags:
        - Workflows
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/WorkflowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowRequest'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete workflow
      description: Delete a workflow for the specified tenant (only if not running)
      operationId: deleteWorkflow
      tags:
        - Workflows
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '204':
          description: Workflow deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/workflows/{workflowId}/execute:
    post:
      summary: Execute workflow
      description: Start execution of a workflow with input data for the specified tenant
      operationId: executeWorkflow
      tags:
        - Executions
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/WorkflowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteWorkflowRequest'
            examples:
              simple-test-execution:
                summary: Simple test workflow execution
                value:
                  input:
                    message: "Hello from Multi-Tenant Postman!"
                    user_id: "Bram Purnot"
                  correlation_id: "req_123456789"
      responses:
        '202':
          description: Workflow execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionResponse'
              examples:
                execution_started:
                  value:
                    id: "ex_d0747788-93b5-44"
                    workflow_id: "wf_72df93aa-4ca7-46"
                    status: "pending"
                    tenant_id: "acme-inc"
                    correlation_id: "req_123456789"
                    started_at: "2025-08-08T11:13:29Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/workflows/{workflowId}/events:
    get:
      summary: Get workflow event history
      description: Retrieve the complete event history for a workflow in the specified tenant
      operationId: getWorkflowEvents
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/WorkflowId'
        - name: execution_id
          in: query
          description: Filter events by execution ID
          schema:
            type: string
            pattern: '^ex_[a-zA-Z0-9-]+$'
        - name: since
          in: query
          description: Return events since this event ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Workflow event history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHistoryResponse'
              examples:
                workflow_events:
                  value:
                    workflow_id: "wf_72df93aa-4ca7-46"
                    events:
                      - id: "336efaf6-c338-4475-8c4e-39d6bcff441e"
                        source: "flunq.io/api"
                        specversion: "1.0"
                        type: "io.flunq.execution.started"
                        time: "2025-08-08T11:13:29Z"
                        workflowid: "wf_72df93aa-4ca7-46"
                        executionid: "ex_d0747788-93b5-44"
                        tenantid: "acme-inc"
                        data:
                          execution_id: "ex_d0747788-93b5-44"
                          workflow_id: "wf_72df93aa-4ca7-46"
                          input:
                            message: "Hello from Multi-Tenant Postman!"
                            user_id: "Bram Purnot"
                      - id: "task-completed-task-initialize-1754652109741998000"
                        source: "flunq.io/worker"
                        specversion: "1.0"
                        type: "io.flunq.task.completed"
                        time: "2025-08-08T11:13:29Z"
                        workflowid: "wf_72df93aa-4ca7-46"
                        executionid: "ex_d0747788-93b5-44"
                        tenantid: "acme-inc"
                        data:
                          task_name: "initialize"
                          status: "completed"
                    total: 10
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/executions:
    get:
      summary: List executions for tenant
      description: Retrieve a list of workflow executions for the specified tenant
      operationId: listExecutions
      tags:
        - Executions
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: workflow_id
          in: query
          description: Filter executions by workflow ID
          schema:
            type: string
            pattern: '^wf_[a-zA-Z0-9-]+$'
        - name: status
          in: query
          description: Filter executions by status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: limit
          in: query
          description: Maximum number of executions to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of executions to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of executions for the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionListResponse'
              examples:
                execution_list:
                  value:
                    items:
                      - id: "ex_d0747788-93b5-44"
                        workflow_id: "wf_72df93aa-4ca7-46"
                        status: "completed"
                        tenant_id: "acme-inc"
                        started_at: "2025-08-08T11:13:29Z"
                        completed_at: "2025-08-08T11:21:49Z"
                      - id: "ex_1e148ecb-6a4f-49"
                        workflow_id: "wf_72df93aa-4ca7-46"
                        status: "completed"
                        tenant_id: "acme-inc"
                        started_at: "2025-08-08T09:47:33Z"
                        completed_at: "2025-08-08T09:47:35Z"
                    total: 2
                    limit: 20
                    offset: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/executions/{executionId}:
    get:
      summary: Get execution details
      description: Retrieve detailed information about a specific execution for the specified tenant
      operationId: getExecution
      tags:
        - Executions
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ExecutionId'
      responses:
        '200':
          description: Execution details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionDetailResponse'
              examples:
                execution_detail:
                  value:
                    id: "ex_d0747788-93b5-44"
                    workflow_id: "wf_72df93aa-4ca7-46"
                    status: "completed"
                    tenant_id: "acme-inc"
                    started_at: "2025-08-08T11:13:29Z"
                    completed_at: "2025-08-08T11:21:49Z"
                    input:
                      message: "Hello from Multi-Tenant Postman!"
                      user_id: "Bram Purnot"
                    output: {}
                    duration_ms: 8193109
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Cancel execution
      description: Cancel a running workflow execution for the specified tenant
      operationId: cancelExecution
      tags:
        - Executions
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ExecutionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for cancellation
                  example: "User requested cancellation"
      responses:
        '200':
          description: Execution cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /{tenantId}/executions/{executionId}/events:
    get:
      summary: Get execution event history
      description: Retrieve the complete event history for a specific execution
      operationId: getExecutionEvents
      tags:
        - Events
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ExecutionId'
        - name: since
          in: query
          description: Return events since this event ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Execution event history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHistoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      summary: Health check
      description: Check the health status of the API service
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  value:
                    status: "healthy"
                    timestamp: "2025-08-08T11:30:00Z"
                    version: "1.0.0"
                    dependencies:
                      redis: "healthy"
                      event_store: "healthy"

components:
  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      description: Unique identifier of the tenant
      schema:
        type: string
        pattern: '^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$'
        minLength: 2
        maxLength: 50
      example: "acme-inc"

    WorkflowId:
      name: workflowId
      in: path
      required: true
      description: Unique identifier of the workflow
      schema:
        type: string
        pattern: '^wf_[a-zA-Z0-9-]+$'
      example: "wf_72df93aa-4ca7-46"

    ExecutionId:
      name: executionId
      in: path
      required: true
      description: Unique identifier of the execution
      schema:
        type: string
        pattern: '^ex_[a-zA-Z0-9-]+$'
      example: "ex_d0747788-93b5-44"

  schemas:
    CreateWorkflowRequest:
      type: object
      required:
        - name
        - definition
      properties:
        name:
          type: string
          description: Human-readable name for the workflow
          example: "user-onboarding"
        description:
          type: string
          description: Description of what the workflow does
          example: "Complete user onboarding process with email verification"
        definition:
          type: object
          description: Serverless Workflow Definition Language specification
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing workflows
          example: ["onboarding", "user-management"]

    UpdateWorkflowRequest:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name for the workflow
        description:
          type: string
          description: Description of what the workflow does
        definition:
          type: object
          description: Serverless Workflow Definition Language specification
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing workflows

    WorkflowResponse:
      type: object
      required:
        - id
        - name
        - status
        - tenant_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Unique identifier for the workflow
          pattern: '^wf_[a-zA-Z0-9-]+$'
          example: "wf_72df93aa-4ca7-46"
        name:
          type: string
          description: Human-readable name for the workflow
          example: "Simple Test Workflow"
        description:
          type: string
          description: Description of what the workflow does
          example: "A simple workflow for testing multi-tenant functionality"
        status:
          type: string
          enum: [created, active, inactive]
          description: Current status of the workflow
        tenant_id:
          type: string
          description: Tenant identifier that owns this workflow
          example: "acme-inc"
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing workflows
        created_at:
          type: string
          format: date-time
          description: When the workflow was created
        updated_at:
          type: string
          format: date-time
          description: When the workflow was last updated

    WorkflowDetailResponse:
      allOf:
        - $ref: '#/components/schemas/WorkflowResponse'
        - type: object
          properties:
            definition:
              type: object
              description: Complete workflow definition
              additionalProperties: true
            execution_count:
              type: integer
              description: Total number of executions
            last_execution:
              type: string
              format: date-time
              description: When the workflow was last executed

    WorkflowListResponse:
      type: object
      properties:
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowResponse'
        total:
          type: integer
          description: Total number of workflows
        limit:
          type: integer
          description: Maximum number of workflows returned
        offset:
          type: integer
          description: Number of workflows skipped

    ExecuteWorkflowRequest:
      type: object
      properties:
        input:
          type: object
          description: Input data for the workflow execution
          additionalProperties: true
        correlation_id:
          type: string
          description: Optional correlation ID for tracking
          example: "req_123456789"

    ExecutionResponse:
      type: object
      required:
        - id
        - workflow_id
        - status
        - tenant_id
        - started_at
      properties:
        id:
          type: string
          description: Unique identifier for the execution
          pattern: '^ex_[a-zA-Z0-9-]+$'
          example: "ex_d0747788-93b5-44"
        workflow_id:
          type: string
          description: ID of the workflow being executed
          pattern: '^wf_[a-zA-Z0-9-]+$'
          example: "wf_72df93aa-4ca7-46"
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          description: Current status of the execution
        tenant_id:
          type: string
          description: Tenant identifier that owns this execution
          example: "acme-inc"
        correlation_id:
          type: string
          description: Correlation ID for tracking
          example: "req_123456789"
        started_at:
          type: string
          format: date-time
          description: When the execution started
        completed_at:
          type: string
          format: date-time
          description: When the execution completed (if applicable)

    ExecutionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ExecutionResponse'
        - type: object
          properties:
            input:
              type: object
              description: Input data provided to the execution
              additionalProperties: true
            output:
              type: object
              description: Output data from the execution (if completed)
              additionalProperties: true
            error:
              type: object
              description: Error information (if failed)
              properties:
                message:
                  type: string
                code:
                  type: string
                details:
                  type: object
                  additionalProperties: true
            current_state:
              type: string
              description: Current state in the workflow
            duration_ms:
              type: integer
              description: Execution duration in milliseconds

    ExecutionListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionResponse'
        total:
          type: integer
          description: Total number of executions
        limit:
          type: integer
          description: Maximum number of executions returned
        offset:
          type: integer
          description: Number of executions skipped

    CloudEvent:
      type: object
      description: CloudEvents v1.0 specification event
      required:
        - id
        - source
        - specversion
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the event
        source:
          type: string
          description: Source of the event
        specversion:
          type: string
          description: CloudEvents specification version
          example: "1.0"
        type:
          type: string
          description: Type of the event
          example: "io.flunq.workflow.started"
        datacontenttype:
          type: string
          description: Content type of the data
          example: "application/json"
        subject:
          type: string
          description: Subject of the event
        time:
          type: string
          format: date-time
          description: When the event occurred
        data:
          type: object
          description: Event payload
          additionalProperties: true
        workflowid:
          type: string
          description: Workflow ID (flunq.io extension)
          example: "wf_72df93aa-4ca7-46"
        executionid:
          type: string
          description: Execution ID (flunq.io extension)
          example: "ex_d0747788-93b5-44"
        tenantid:
          type: string
          description: Tenant ID (flunq.io extension)
          example: "acme-inc"

    EventHistoryResponse:
      type: object
      properties:
        workflow_id:
          type: string
          description: ID of the workflow
        events:
          type: array
          items:
            $ref: '#/components/schemas/CloudEvent'
        total:
          type: integer
          description: Total number of events
        since:
          type: string
          description: Event ID used as starting point (if provided)

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall health status
        timestamp:
          type: string
          format: date-time
          description: When the health check was performed
        version:
          type: string
          description: API version
        dependencies:
          type: object
          description: Status of external dependencies
          properties:
            redis:
              type: string
              enum: [healthy, unhealthy]
            event_store:
              type: string
              enum: [healthy, unhealthy]

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "The request body contains invalid data"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        request_id:
          type: string
          description: Unique identifier for the request
          example: "req_01234567890abcdef"

  responses:
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              value:
                error: "VALIDATION_ERROR"
                message: "The request body contains invalid data"
                details:
                  field: "name"
                  reason: "name is required"

    NotFound:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            workflow_not_found:
              value:
                error: "WORKFLOW_NOT_FOUND"
                message: "The specified workflow does not exist"

    InternalServerError:
      description: Internal Server Error - Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            internal_error:
              value:
                error: "INTERNAL_ERROR"
                message: "An unexpected error occurred"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (to be implemented)

# Global security (commented out for now)
# security:
#   - BearerAuth: []

tags:
  - name: Workflows
    description: Workflow management operations
  - name: Executions
    description: Workflow execution operations
  - name: Events
    description: Event history and monitoring
  - name: System
    description: System health and monitoring
