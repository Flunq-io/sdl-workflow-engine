version: '3.8'

services:
  # Redis - Event store and cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - REDIS_URL=redis:6379
      - EVENTS_URL=http://events:8081
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Events Service
  events:
    build:
      context: ./events
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      - "9001:9001"
    environment:
      - PORT=8081
      - GRPC_PORT=9001
      - BACKEND=redis
      - REDIS_URL=redis:6379
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Service
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - WORKER_ID=worker-1
      - CONCURRENCY=10
      - REDIS_URL=redis:6379
      - EVENTS_URL=http://events:8081
      - TASKS_URL=http://tasks:8083
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
      events:
        condition: service_healthy
    deploy:
      replicas: 2

  # Tasks Service
  tasks:
    build:
      context: ./tasks
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - REDIS_URL=redis:6379
      - DEFAULT_TIMEOUT=30s
      - MAX_RETRIES=3
      - RATE_LIMIT=100
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # UI Service
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8081
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-secret-key-here
    depends_on:
      api:
        condition: service_healthy

volumes:
  redis_data:

networks:
  default:
    name: flunq-network
